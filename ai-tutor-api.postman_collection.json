{
  "info": {
    "name": "AI Tutor API",
    "_postman_id": "ai-tutor-api-collection",
    "description": "Postman collection for AI Tutor backend API (register, login, file upload, file list, AI Q&A, health check).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Register",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}"
        },
        "url": {
          "raw": "http://localhost:8000/api/v1/auth/register",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "auth", "register"]
        }
      }
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}"
        },
        "url": {
          "raw": "http://localhost:8000/api/v1/auth/login",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "auth", "login"]
        }
      }
    },
    {
      "name": "Upload File(s)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "uploads",
              "type": "file",
              "src": ""
            }
          ]
        },
        "url": {
          "raw": "http://localhost:8000/api/v1/files/upload",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "files", "upload"]
        }
      }
    },
    {
      "name": "List Uploaded Files",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "http://localhost:8000/api/v1/files/list",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "files", "list"]
        }
      }
    },
    {
      "name": "AI Q&A (Ask Teacher)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"question\": \"What is the Pythagorean theorem?\",\n  \"slide_deck_id\": 1\n}"
        },
        "url": {
          "raw": "http://localhost:8000/api/v1/ai/ask",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "ai", "ask"]
        },
        "description": "Ask a question to the AI tutor. Optionally provide a slide_deck_id to use that deck's content as reference. Uses the configured primary model provider (default: Gemini) with fallback to the secondary provider. Model providers can be configured in .env: PRIMARY_MODEL_PROVIDER=gemini (or openai), FALLBACK_MODEL_PROVIDER=openai (or gemini)."
      }
    },
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "url": {
          "raw": "http://localhost:8000/health",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["health"]
        }
      }
    },
    {
      "name": "Download Original File",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "http://localhost:8000/api/v1/files/download/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "files", "download", "1"]
        }
      }
    },
    {
      "name": "Download Converted PPTX",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "http://localhost:8000/api/v1/files/download-pptx/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "files", "download-pptx", "1"]
        }
      }
    },
    {
      "name": "List Slides in a Deck",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "http://localhost:8000/api/v1/ai/slides/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "ai", "slides", "1"]
        },
        "description": "List all slides (number and content) for a given slide deck. User must own the deck."
      }
    },
    {
      "name": "Explain a Slide",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"slide_deck_id\": 1,\n  \"slide_number\": 2\n}"
        },
        "url": {
          "raw": "http://localhost:8000/api/v1/ai/explain-slide",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "ai", "explain-slide"]
        },
        "description": "Get an AI-generated explanation for a specific slide in a deck. Only the content of the specified slide is used. Supports both text and image-based slides using the configured primary model provider (default: Gemini) with fallback to the secondary provider. For text-only slides: Uses GPT-4o Mini (OpenAI) or Gemini 2.0 Flash (Gemini). For multimodal slides: Uses the same models with vision capabilities. Model providers can be configured in .env: PRIMARY_MODEL_PROVIDER=gemini (or openai), FALLBACK_MODEL_PROVIDER=openai (or gemini)."
      }
    },
    {
      "name": "Get Slide Image",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{access_token}}" }
        ],
        "url": {
          "raw": "http://localhost:8000/api/v1/ai/slide-image/1/1",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": ["api", "v1", "ai", "slide-image", "1", "1"]
        },
        "description": "Get the raw image for a specific slide in a deck. Returns the image file (PNG, JPEG, etc)."
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "key": "access_token",
      "value": ""
    }
  ]
} 